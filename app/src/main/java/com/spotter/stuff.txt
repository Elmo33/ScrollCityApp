filter function:
1. users can set the number of people by clicking on cute person icons that will be a draggable.
 there's also going to be a special checkbox  when 2 selected for couple
2. users can filter the expense of the activity from fee to $ to $$$ that is also draggable.
3. users also can drag the time filter icon, which will be from day to night, and the drag line will change the
color from oragne to dark blue depending on the hour selected.
4. users can set the mood/purpose, like eating (food icon), having fun, clubbing, gaming, other.


rating functionality is questinable, but could be considered. same for reviews, start rating could be visible directly
when scrolling, and then people could add comments after opening the details of the venue.





main navigation buttons.

Home, Events, Profile















description:




Spotter is a niche social media platform designed to help users discover local entertainment
spots—like bars, clubs, game rooms, and go-kart tracks through short, engaging videos (30 to 60 seconds).
Businesses upload these clips, showcasing their venue or activity, and users scroll through them in a TikTok-style
feed. By leveraging filters, tags (e.g., #travel, #tbilisi), and an algorithmic recommendation system,
Spotter aims to surface hidden gems that people might not otherwise find on larger platforms. The core
selling point is easing the discovery process for users who don’t even know what to search for, letting
them “scroll to discover” rather than actively typing in keywords. While critics argue that major
social media networks already serve similar content, Spotter’s focus on niche, local experiences
sets it apart, albeit with the challenge of needing strong marketing and creative advertising to build
an initial user base.










I am making a kotlin app, and i need you to help me with some coding stuff, this is my app design, I am just giving you all the context after which I'll give you the tasks to solve.


Scroll & Go is a niche social media platform designed to help users discover local entertainment
spots—like bars, clubs, game rooms, and go-kart tracks—through short, engaging videos (30 to 60 seconds).
Businesses upload these clips, showcasing their venue or activity, and users scroll through them in a TikTok-style
feed. By leveraging filters, tags (e.g., #travel, #tbilisi), and an algorithmic recommendation system,
Scroll & Go aims to surface hidden gems that people might not otherwise find on larger platforms. The core
selling point is easing the discovery process for users who don’t even know what to search for, letting
them “scroll to discover” rather than actively typing in keywords. While critics argue that major
social media networks already serve similar content, Scroll & Go’s focus on niche, local experiences
sets it apart, albeit with the challenge of needing strong marketing and creative advertising to build
an initial user base.
dependancies used:
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
}

android {
    namespace = "com.scrollcity"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.scrollcity"
        minSdk = 24
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
    }
}
dependencies {
    // AndroidX Core & Lifecycle
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)

    // Compose BOM (pick a stable version matching your libs.* or specify a version)
    implementation(platform(libs.androidx.compose.bom))

    // Compose UI + Foundation + Material3 (version from BOM)
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation("androidx.compose.foundation:foundation")
    implementation("androidx.compose.foundation:foundation-layout")
    // optional
    implementation("androidx.compose.ui:ui-viewbinding")

    // Coil for images
    implementation("io.coil-kt:coil-compose:2.2.2")

    // *** Media3 unified to 1.5.1 ***
    implementation("androidx.media3:media3-exoplayer:1.5.1")
    implementation("androidx.media3:media3-ui:1.5.1")
    implementation("androidx.media3:media3-common:1.5.1")

    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1")

    implementation(libs.androidx.navigation.runtime.ktx)
    implementation(libs.androidx.navigation.compose)

    // Test
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}


while answering questions I want you to take my configuration into account and use latest info about kotlin and library udpates
